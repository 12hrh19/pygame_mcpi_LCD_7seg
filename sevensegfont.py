# 7-segment font desin in 4x7 dot matrix
# two blocks for each segment
# 7セグのフォントデザイン、4x7ドットマトリクス
# 各セグメントをブロック２個で構成。


# 7セグのスタイル設定

# 7セグの配置  pygameの場合、y軸反転が必要
# 各ブロック、左下原点*(0,0)からのオフセット(x,y)
# y:
# 6     A A       A0(1, 6)  A1(2, 6)
# 5   F     B     F1(0, 5)  B1(3, 5)
# 4   F     B     F0(0, 4)  B0(3, 4)
# 3     G G       G0(1, 3)  G1(2, 3)
# 2   E     C     E1(0, 2)  C1(3, 2)
# 1   E     C     E0(0, 1)  C0(3, 1)
# 0   * D D       D0(1, 0)  D1(2, 0)
# x:  0 1 2 3

OFFSET_A = ((1, 6), (2, 6))
OFFSET_B = ((3, 4), (3, 5))
OFFSET_C = ((3, 1), (3, 2))
OFFSET_D = ((1, 0), (2, 0))
OFFSET_E = ((0, 1), (0, 2))
OFFSET_F = ((0, 4), (0, 5))
OFFSET_G = ((1, 3), (2, 3))

# 表示する数字／記号のon/off情報
# セグメントAからGについて7種類、「タプル」で用意する。
# 加えて、各セグメントのオフセット情報を16番目の要素、セグメント名を17番目の要素として持つ。
# セグメント名は本来の動作には不要。
SEG_A = (1, 0, 1, 1,   0, 1, 1, 1,   1, 1, 1, 0,   1, 0, 1, 1,  OFFSET_A, "A")
SEG_B = (1, 1, 1, 1,   1, 0, 0, 1,   1, 1, 1, 0,   0, 1, 0, 0,  OFFSET_B, "B")
SEG_C = (1, 1, 0, 1,   1, 1, 1, 1,   1, 1, 1, 1,   0, 1, 0, 0,  OFFSET_C, "C")
SEG_D = (1, 0, 1, 1,   0, 1, 1, 0,   1, 1, 0, 1,   1, 1, 1, 0,  OFFSET_D, "D")
SEG_E = (1, 0, 1, 0,   0, 0, 1, 0,   1, 0, 1, 1,   1, 1, 1, 1,  OFFSET_E, "E")
SEG_F = (1, 0, 0, 0,   1, 1, 1, 0,   1, 1, 1, 1,   1, 0, 1, 1,  OFFSET_F, "F")
SEG_G = (0, 0, 1, 1,   1, 1, 1, 0,   1, 1, 1, 1,   0, 1, 1, 1,  OFFSET_G, "G")

# タプルの読み出し方法。インデックスとして3を指定。0番目、1番目、2番目、3番目。
# print(SEG_A[3])

# さらに、タプルのタプルを作る。
SEGMENTS = (SEG_A, SEG_B, SEG_C, SEG_D, SEG_E, SEG_F, SEG_G)
